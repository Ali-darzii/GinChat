basePath: /api/v1
definitions:
  GinChat_serializer.APIUserPagination:
    properties:
      count:
        type: integer
      next:
        type: string
      previous:
        type: string
      results:
        items:
          $ref: '#/definitions/GinChat_serializer.UserInRoom'
        type: array
    type: object
  GinChat_serializer.LoginRequest:
    properties:
      name:
        type: string
      phone_no:
        type: string
      token:
        type: integer
    required:
    - phone_no
    - token
    type: object
  GinChat_serializer.MakeNewChatRequest:
    properties:
      content:
        type: string
      recipient_id:
        minimum: 1
        type: integer
    required:
    - content
    - recipient_id
    type: object
  GinChat_serializer.RegisterRequest:
    properties:
      phone_no:
        maxLength: 11
        minLength: 11
        type: string
    required:
    - phone_no
    type: object
  GinChat_serializer.Room:
    properties:
      avatar:
        type: string
      name:
        type: string
      room_id:
        type: integer
      room_type:
        type: string
      time_stamp:
        type: string
      users:
        items:
          $ref: '#/definitions/GinChat_serializer.UserAPI'
        type: array
    type: object
  GinChat_serializer.SendPvMessage:
    properties:
      content:
        type: string
      image:
        type: string
      room_id:
        type: integer
      sender:
        type: integer
      timestamp:
        type: string
      type:
        type: string
    required:
    - content
    - room_id
    type: object
  GinChat_serializer.Token:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  GinChat_serializer.UpdatedProfile:
    properties:
      avatar:
        type: string
      id:
        type: integer
      name:
        type: string
      username:
        type: string
    type: object
  GinChat_serializer.UserAPI:
    properties:
      id:
        type: integer
      name:
        type: string
      username:
        type: string
    type: object
  GinChat_serializer.UserInRoom:
    properties:
      avatar:
        type: string
      name:
        type: string
      room_id:
        type: integer
      time_stamp:
        type: string
      user_id:
        type: integer
      username:
        type: string
    type: object
  GinChat_utils.DummyMakeGroupChat:
    properties:
      avatar:
        type: string
      name:
        type: string
      recipients_id:
        items:
          type: integer
        type: array
    required:
    - name
    - recipients_id
    type: object
  GinChat_utils.DummyMessage:
    properties:
      content:
        type: string
      room_id:
        type: integer
      type:
        type: string
    required:
    - content
    - room_id
    - type
    type: object
  GinChat_utils.DummyProfileUpdate:
    properties:
      avatar:
        type: string
      id:
        type: integer
      name:
        type: string
      username:
        type: string
    required:
    - name
    type: object
  GinChat_utils.ErrorResponse:
    properties:
      detail:
        type: string
      error_code:
        type: integer
      status:
        type: boolean
    type: object
  GinChat_utils.RegisterResponse:
    properties:
      detail:
        type: string
      isSignup:
        type: boolean
    type: object
  serializer.ProfileAPI:
    properties:
      avatar:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
  serializer.PvMessageRequest:
    type: object
externalDocs:
  description: OpenAPI
host: localhost:8080
info:
  contact:
    name: API Support
  description: |-
    This is a Gin chat documentation
    Base URL is in top
    We_Don't_Know_What_Happened error usually is db error(access issue)
  license:
    name: ali.darzi.1354@gmail.com
  title: Swagger Example API
  version: "1.0"
paths:
  /auth/:
    post:
      consumes:
      - application/json
      description: 1 min for every request, not authenticated, and returns a JWT token
      parameters:
      - description: Register details
        in: body
        name: Register
        required: true
        schema:
          $ref: '#/definitions/GinChat_serializer.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GinChat_utils.RegisterResponse'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/GinChat_utils.RegisterResponse'
        "400":
          description: Too_Many_Token_Request(7) | Token_Expired_Or_Invalid(2) | We_Don't_Know_What_Happened(8)
            | MUST_NOT_AUTHENTICATED(1)
          schema:
            $ref: '#/definitions/GinChat_utils.ErrorResponse'
      summary: send token
      tags:
      - Authenticate
    put:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token
      parameters:
      - description: Login details
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/GinChat_serializer.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GinChat_serializer.Token'
        "400":
          description: Object_Not_Found(6) | Token_Expired_Or_Invalid(2) | Name_Field_Required_For_Register(12)
            | We_Don't_Know_What_Happened(8) | MUST_NOT_AUTHENTICATED(1)
          schema:
            $ref: '#/definitions/GinChat_utils.ErrorResponse'
      summary: check token
      tags:
      - Authenticate
  /chat/get-rooms:
    get:
      consumes:
      - application/json
      description: |-
        get all pv and gp chats that user have & need authentication
        avatar --> if it's gp will be gp's avatar and if it's pv it will be user in chat avatar
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GinChat_serializer.Room'
        "400":
          description: Token_Expired_Or_Invalid(2) | Object_Not_Found(6)
          schema:
            $ref: '#/definitions/GinChat_utils.ErrorResponse'
        "401":
          description: Unauthorized
      summary: get all chat rooms
      tags:
      - chat
  /chat/get-users/:
    get:
      consumes:
      - application/json
      description: |-
        get all users
        if their have a room in pv chat it will come with it
        this url need get-users?offset=0&limit=0
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GinChat_serializer.APIUserPagination'
        "400":
          description: Token_Expired_Or_Invalid(2) | Bad_Format(5)
          schema:
            $ref: '#/definitions/GinChat_utils.ErrorResponse'
        "500":
          description: We_Don't_Know_What_Happened(8)
          schema:
            $ref: '#/definitions/GinChat_utils.ErrorResponse'
      summary: get all users
      tags:
      - user
  /chat/make-group:
    post:
      consumes:
      - application/json
      description: |-
        create group chat
        send data in form-data
        all users of group will receive data of created group by websocket (same as creator)
        so on success creator wil receive nil
      parameters:
      - description: Message body
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/GinChat_utils.DummyMakeGroupChat'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Token_Expired_Or_Invalid(2) | Object_Not_Found(6) | Bad_Format(5)
          schema:
            $ref: '#/definitions/GinChat_utils.ErrorResponse'
        "500":
          description: We_Don't_Know_What_Happened(8)
          schema:
            $ref: '#/definitions/GinChat_utils.ErrorResponse'
      summary: make gp chat
      tags:
      - chat
  /chat/make-private:
    post:
      consumes:
      - application/json
      description: |-
        create private chat
        you need to send 1 message too to create private chat
        it has
      parameters:
      - description: Message body
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/GinChat_serializer.MakeNewChatRequest'
      produces:
      - application/json
      responses:
        "201":
          description: you're recipient going to receive the response from ws !
          schema:
            $ref: '#/definitions/GinChat_serializer.SendPvMessage'
        "400":
          description: Token_Expired_Or_Invalid(2) | Object_Not_Found(6) | Bad_Format(5)
            | We_Don't_Know_What_Happened(8)
          schema:
            $ref: '#/definitions/GinChat_utils.ErrorResponse'
      summary: make pv chat
      tags:
      - chat
  /chat/send-pv-message:
    post:
      consumes:
      - application/json
      description: |-
        send private chat
        *send data in form-data !
        all users will receive data by websocket (same as api creator)
        so on success creator wil receive nil
      parameters:
      - description: Message body
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/serializer.PvMessageRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Token_Expired_Or_Invalid(2) | Object_Not_Found(6) | Bad_Format(5)
          schema:
            $ref: '#/definitions/GinChat_utils.ErrorResponse'
        "500":
          description: We_Don't_Know_What_Happened(8)
          schema:
            $ref: '#/definitions/GinChat_utils.ErrorResponse'
      summary: send pv chat
      tags:
      - chat
  /chat/ws:
    post:
      consumes:
      - application/json
      description: |-
        Sends a chat message to a specific user or group
        it's websocket connection not http post method (swagger doesn't support ws documentation)
        type is either pv_message or group_message
      parameters:
      - description: Message body
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/GinChat_utils.DummyMessage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GinChat_serializer.SendPvMessage'
        "500":
          description: Internal Server Error
      summary: connect to websocket and send message
      tags:
      - chat
  /user//get-profile/:id/:
    get:
      consumes:
      - application/json
      description: get authenticated user profile
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/serializer.ProfileAPI'
        "400":
          description: Object_Not_Found(6) | Bad_Format(5)
          schema:
            $ref: '#/definitions/GinChat_utils.ErrorResponse'
      summary: get user profile
      tags:
      - user
  /user/profile-update/:id/:
    get:
      consumes:
      - application/json
      description: |-
        send this in form-data
        it has
      parameters:
      - description: Message body
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/GinChat_utils.DummyProfileUpdate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/GinChat_serializer.UpdatedProfile'
        "400":
          description: Token_Expired_Or_Invalid(2) | Object_Not_Found(6) | Bad_Format(5)
            | User_Name_Is_Taken(11)
          schema:
            $ref: '#/definitions/GinChat_utils.ErrorResponse'
        "500":
          description: We_Don't_Know_What_Happened(8)
          schema:
            $ref: '#/definitions/GinChat_utils.ErrorResponse'
      summary: update user profile
      tags:
      - user
securityDefinitions:
  Json Web Token (jwt):
    type: basic
swagger: "2.0"
